[{"path":"https://stufield.github.io/stabilityselectr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 stabilityselectr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stufield.github.io/stabilityselectr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with stabilityselectr","title":"Getting help with stabilityselectr","text":"Thanks using stabilityselectr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://stufield.github.io/stabilityselectr/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with stabilityselectr","text":"can’t reproduce bug, can’t fix ! Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (excellent ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help!.","code":""},{"path":"https://stufield.github.io/stabilityselectr/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with stabilityselectr","text":"Armed reprex, next step figure ask: ’s question: start community.rstudio.com /StackOverflow. people answer questions. ’s bug: ’re right place -> file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers, :pr, :closed, etc., needed, e.g. ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://stufield.github.io/stabilityselectr/articles/progeny-clustering.html","id":"useful-functions","dir":"Articles","previous_headings":"","what":"Useful functions:","title":"Progeny and Stability Clustering","text":"progeny_cluster(): performs progeny clustering plot() print(): S3 methods class pclust stability_cluster(): performs stability clustering","code":""},{"path":"https://stufield.github.io/stabilityselectr/articles/progeny-clustering.html","id":"progeny-clustering-via-progeny_cluster","dir":"Articles","previous_headings":"","what":"Progeny Clustering via progeny_cluster()","title":"Progeny and Stability Clustering","text":"Select optimal number clustering using Progeny Clustering. “true” number clusters progeny_data object 3.","code":"pc <- progeny_cluster(progeny_data, clust_iter = 2:9L,                       reps = 10L, iter = 25L, size = 6) pc #> ══ Progeny Cluster Object ═════════════════════════════════════════════ #>    Call                     progeny_cluster(data = progeny_data, clust_iter = 2:9L, reps = 10L, iter = 25L, size = 6) #>    Progeny Size             6 #>    No. of Iterations        25 #>    K Iterations             2 3 4 5 6 7 8 9 #>  #> ── Mean & CI95 Stability Scores ─────────────────────────────────────── #>        k=2  k=3  k=4  k=5  k=6  k=7  k=8 k=9* #> 2.5%  2.64 14.9 10.4 11.4 12.4 15.9 16.8 21.2 #>       3.65 19.6 12.7 15.0 13.6 17.6 20.3 25.9 #> 97.5% 4.31 33.0 16.8 22.2 15.2 19.6 24.5 28.5 #>  #> ── Maximum Distance Scores ──────────────────────────────────────────── #>    k=2   k=3*    k=4    k=5    k=6    k=7    k=8    k=9  #> -2.774 12.215  0.702  1.270 -3.624 -0.661 -2.162 -2.522  #>  #> ── Gap Distance Scores ──────────────────────────────────────────────── #>    k=2   k=3*    k=4    k=5    k=6    k=7    k=8    k=9  #> -22.87  22.87  -9.18   3.70  -5.38   1.25  -2.83   2.83  #> ═══════════════════════════════════════════════════════════════════════ plot(pc)"},{"path":"https://stufield.github.io/stabilityselectr/articles/progeny-clustering.html","id":"stability-clustering-via-stability_cluster","dir":"Articles","previous_headings":"","what":"Stability Clustering via stability_cluster()","title":"Progeny and Stability Clustering","text":"Partitioning Around Medoids (PAM) used uses robust measurement cluster centers (medoids) implementation keeps cluster labels consistent across runs, key feature calculating across run stability. occur using stats::kmeans() initial cluster labels arbitrarily assigned. Correct clusters : cluster 1 -> samples 1:50 cluster 2 -> samples 51:100 cluster 3 -> samples 101:150","code":"stab_clust <- withr::with_seed(999,   stability_cluster(progeny_data, k = 3L, iter = 500L) ) stab_clust #> # A tibble: 150 × 4 #>    `k=1` `k=2` `k=3` ProbK #>    <dbl> <dbl> <dbl> <dbl> #>  1 0.718 0.156 0.126     1 #>  2 0.684 0.172 0.144     1 #>  3 0.682 0.152 0.166     1 #>  4 0.664 0.19  0.146     1 #>  5 0.642 0.184 0.174     1 #>  6 0.7   0.154 0.146     1 #>  7 0.696 0.13  0.174     1 #>  8 0.644 0.154 0.202     1 #>  9 0.652 0.178 0.17      1 #> 10 0.682 0.154 0.164     1 #> # ℹ 140 more rows  # view 3-way confusion matrix table(actual = rep(1:3, each = 50L), predicted = stab_clust$ProbK) #>       predicted #> actual  1  2  3 #>      1 49  1  0 #>      2  0 46  4 #>      3  1  0 49  # identify false clusters stab_clust <- stab_clust |>   dplyr::mutate(     sample = dplyr::row_number(),     pch    = rep(16:18, each = 50),     pch    = dplyr::case_when(       sample <= 50 & ProbK != 1L ~ 13L,                 # cluster 1       sample > 50 & sample <= 100 & ProbK != 2L ~ 13L,  # cluster 2       sample > 100 & ProbK != 3L ~ 13L,                 # cluster 3       TRUE ~ pch     )   )  # view incorrect clusters (n = 6) stab_clust |> dplyr::filter(pch == 13) #> # A tibble: 6 × 6 #>   `k=1` `k=2` `k=3` ProbK sample   pch #>   <dbl> <dbl> <dbl> <dbl>  <int> <int> #> 1 0.37  0.442 0.188     2     43    13 #> 2 0.196 0.376 0.428     3     58    13 #> 3 0.228 0.346 0.426     3     73    13 #> 4 0.174 0.406 0.42      3     84    13 #> 5 0.162 0.388 0.45      3     86    13 #> 6 0.636 0.224 0.14      1    115    13"},{"path":"https://stufield.github.io/stabilityselectr/articles/progeny-clustering.html","id":"plotting-clusters","dir":"Articles","previous_headings":"Stability Clustering via stability_cluster()","what":"Plotting Clusters","title":"Progeny and Stability Clustering","text":"can plot progeny_data object, 3 main clusters, identify samples “correctly” clustered via stability clustering “X”.","code":"par_def <- list(mgp = c(2, 0.75, 0), mar = c(3, 4, 3, 1)) par(par_def) par(mfrow = 1:2L) plot(progeny_data, col = rep(2:4, each = 50L),      pch = rep(16:18, each = 50), cex = 1.75, main = \"Simulated 3 Cluster Data\") plot(progeny_data, col = rep(2:4, each = 50), pch = stab_clust$pch, cex = 1.75,      main = \"Stability Clustering\")"},{"path":"https://stufield.github.io/stabilityselectr/articles/progeny-clustering.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Progeny and Stability Clustering","text":"Hu, C.W., Kornblau, S.M., Slater, J.H. .. Qutub (2015). Progeny Clustering: Method Identify Biological Phenotypes. Scientific Reports, 5:12894. http://www.nature.com/articles/srep12894","code":""},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"useful-functions-in-stabilityselectr","dir":"Articles","previous_headings":"","what":"Useful functions in stabilityselectr","title":"Introduction to Stability Selection","text":"stability_selection() is_stab_sel() get_stable_features() get_threshold_features() calc_emp_fdr() calc_emp_fdr_breaks() plot_emp_fdr() plot_permuted_data() progeny_cluster() stability_cluster()","code":""},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Introduction to Stability Selection","text":"typical stability selection analysis might similar one .","code":""},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"run-stability_selection","dir":"Articles","previous_headings":"Examples","what":"Run stability_selection()","title":"Introduction to Stability Selection","text":"","code":"set.seed(101) n_feat      <- 20L n_samples   <- 100L x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat) colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat)) y           <- sample(1:2, n_samples, replace = TRUE) stab_sel    <- stability_selection(x, y, kernel = \"l1-logistic\", num_iter = 500L) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial) is_stab_sel(stab_sel) #> [1] TRUE stab_sel #> ══ Stability Selection (Kernel: l1-logistic) ══════════════════════════ #> • Weakness (alpha)            0.8 #> • Weakness Probability (Pw)   0.5 #> • Number of Iterations        500 #> • Standardized                'Yes' #> • Imputed Outliers            'No' #> • Lambda Max                  0.1879 #> • Lambda Min Ratio            0.1 #> • Permuted Data               'No' #> • Random Seed                 506 #> ═══════════════════════════════════════════════════════════════════════"},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"plot-stability-paths","dir":"Articles","previous_headings":"Examples","what":"Plot stability paths","title":"Introduction to Stability Selection","text":"","code":"plot(stab_sel, thresh = 0.85)"},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"stable-features-at-a-threshold","dir":"Articles","previous_headings":"Examples","what":"Stable Features at a threshold","title":"Introduction to Stability Selection","text":"","code":"get_stable_features(stab_sel, thresh = 0.85) #>        MaxSelectProb    FDRbound #> feat_t         0.927 0.003571429 #> feat_d         0.917 0.007142857 #> feat_j         0.900 0.010714286 #> feat_m         0.898 0.014285714 #> feat_s         0.887 0.017857143 #> feat_g         0.863 0.021428571 #> feat_a         0.859 0.025000000"},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"stable-features-at-multiple-thresholds","dir":"Articles","previous_headings":"Examples","what":"Stable Features at multiple thresholds","title":"Introduction to Stability Selection","text":"","code":"get_threshold_features(stab_sel, thresh_vec = seq(0.7, 0.9, 0.05)) #> $thresh_0.7 #>        MaxSelectProb FDRbound #> feat_t         0.927  0.00625 #> feat_d         0.917  0.01250 #> feat_j         0.900  0.01875 #> feat_m         0.898  0.02500 #> feat_s         0.887  0.03125 #> feat_g         0.863  0.03750 #> feat_a         0.859  0.04375 #> feat_r         0.844  0.05000 #> feat_q         0.839  0.05625 #> feat_c         0.832  0.06250 #> feat_n         0.827  0.06875 #> feat_h         0.824  0.07500 #> feat_f         0.810  0.08125 #> feat_e         0.809  0.08750 #> feat_l         0.800  0.09375 #> feat_i         0.789  0.10000 #> feat_b         0.784  0.10625 #> feat_o         0.784  0.11250 #> feat_k         0.783  0.11875 #> feat_p         0.771  0.12500 #>  #> $thresh_0.75 #>        MaxSelectProb FDRbound #> feat_t         0.927    0.005 #> feat_d         0.917    0.010 #> feat_j         0.900    0.015 #> feat_m         0.898    0.020 #> feat_s         0.887    0.025 #> feat_g         0.863    0.030 #> feat_a         0.859    0.035 #> feat_r         0.844    0.040 #> feat_q         0.839    0.045 #> feat_c         0.832    0.050 #> feat_n         0.827    0.055 #> feat_h         0.824    0.060 #> feat_f         0.810    0.065 #> feat_e         0.809    0.070 #> feat_l         0.800    0.075 #> feat_i         0.789    0.080 #> feat_b         0.784    0.085 #> feat_o         0.784    0.090 #> feat_k         0.783    0.095 #> feat_p         0.771    0.100 #>  #> $thresh_0.8 #>        MaxSelectProb    FDRbound #> feat_t         0.927 0.004166667 #> feat_d         0.917 0.008333333 #> feat_j         0.900 0.012500000 #> feat_m         0.898 0.016666667 #> feat_s         0.887 0.020833333 #> feat_g         0.863 0.025000000 #> feat_a         0.859 0.029166667 #> feat_r         0.844 0.033333333 #> feat_q         0.839 0.037500000 #> feat_c         0.832 0.041666667 #> feat_n         0.827 0.045833333 #> feat_h         0.824 0.050000000 #> feat_f         0.810 0.054166667 #> feat_e         0.809 0.058333333 #> feat_l         0.800 0.062500000 #>  #> $thresh_0.85 #>        MaxSelectProb    FDRbound #> feat_t         0.927 0.003571429 #> feat_d         0.917 0.007142857 #> feat_j         0.900 0.010714286 #> feat_m         0.898 0.014285714 #> feat_s         0.887 0.017857143 #> feat_g         0.863 0.021428571 #> feat_a         0.859 0.025000000 #>  #> $thresh_0.9 #>        MaxSelectProb FDRbound #> feat_t         0.927 0.003125 #> feat_d         0.917 0.006250 #> feat_j         0.900 0.009375"},{"path":"https://stufield.github.io/stabilityselectr/articles/stabilityselectr.html","id":"progeny-and-stability-clustering","dir":"Articles","previous_headings":"","what":"Progeny and Stability Clustering","title":"Introduction to Stability Selection","text":"See separate vignette clustering: vignette(\"progeny-clustering\").","code":""},{"path":"https://stufield.github.io/stabilityselectr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stu Field. Author, maintainer, copyright holder.","code":""},{"path":"https://stufield.github.io/stabilityselectr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Field S (2025). stabilityselectr: R Package Perform Stability Cluster Selection. R package version 0.0.2.","code":"@Manual{,   title = {stabilityselectr: R Package to Perform Stability and Cluster Selection},   author = {Stu Field},   year = {2025},   note = {R package version 0.0.2}, }"},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Package to Perform Stability and Cluster Selection","text":"stabilityselectr package performs stability selection variety kernels provided glmnet package, provides simple tools plotting extracting selected features. additional functionality designed facilitate various forms permutation clustering analyses.","code":""},{"path":"https://stufield.github.io/stabilityselectr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package to Perform Stability and Cluster Selection","text":"","code":"# current dev version remotes::install_github(\"stufield/stabilityselectr\")  # or a specific version remotes::install_github(\"stufield/stabilityselectr@v0.0.1\")"},{"path":"https://stufield.github.io/stabilityselectr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Package to Perform Stability and Cluster Selection","text":"load stabilityselectr simply make call library() usual:","code":"library(stabilityselectr)"},{"path":"https://stufield.github.io/stabilityselectr/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"R Package to Perform Stability and Cluster Selection","text":"","code":"library(help = stabilityselectr)"},{"path":"https://stufield.github.io/stabilityselectr/index.html","id":"package-notes","dir":"","previous_headings":"","what":"Package Notes","title":"R Package to Perform Stability and Cluster Selection","text":"stabilityselectr package easy use. first go-looking dimensionality reduction upstream feature selection.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Empirical Number of False Positives — calc_emp_fdr","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"Calculate mean number false positive features permutation analysis performed stability selection run. assumes permutation set generated stability selection, (.e. num_perms > 0).","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"","code":"calc_emp_fdr(x, thresh_seq, warn = TRUE)"},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"x stab_sel class object generated via stability_selection(). thresh_seq numeric(n). sequence [0, 1] specifying thresholds evaluate. warn logical(1). warnings triggered mean < 5 permutations returned?","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"named vector indicating average number (counts) false positive features selected various thresholds specified thresh_seq.","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"Stu Field, Michael R. Mehan","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Empirical Number of False Positives — calc_emp_fdr","text":"","code":"withr::with_seed(101, {   n_feat      <- 20   n_samples   <- 100   x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y  <- sample(1:2, n_samples, replace = TRUE) }) ss <- stability_selection(x, y, \"l1-logistic\", num_iter = 25,                           num_perms = 25, r_seed = 101, parallel = TRUE) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial) calc_emp_fdr(ss, seq(0.5, 0.9, 0.1)) #> thresh_0.5 thresh_0.6 thresh_0.7 thresh_0.8 thresh_0.9  #>      20.00      20.00      19.56      15.20       4.80"},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"Calculates stability selection threshold, mean number false positive selected features (empirical), number selected features specified FDR break points. Relies calc_emp_fdr() calculate mean false discovery based permutations stability selection algorithm.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"","code":"calc_emp_fdr_breaks(   x,   thresh_seq = seq(1, 0.1, by = -0.01),   fdr_breaks = c(0.5, 1, 2, 3, 5) )"},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"x stab_sel class object generated via stability_selection(). thresh_seq numeric(n). sequence [0, 1] specifying thresholds evaluate. fdr_breaks numeric(n). vector specifying desired mean number empirical false positives calculate various thresholds.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"list consisting : n_selected vector number features selected empirical stability selection threshold meanFPs vector mean number false positive selected features empirical stability selection threshold breaks tibble containing empirical false positive summary statistics FDR specified break point","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/calc_emp_fdr_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Empirical FDR Break Points — calc_emp_fdr_breaks","text":"","code":"# l1-logistic withr::with_seed(101, {   n_feat      <- 20   n_samples   <- 100   x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y        <- sample(1:2, n_samples, replace = TRUE) }) stab_sel <- stability_selection(x, y, \"l1-logistic\", num_iter = 25,                                 num_perms = 25,                                 r_seed = 101, parallel = TRUE) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial) calc_emp_fdr_breaks(stab_sel) #> $fdr_data #> # A tibble: 91 × 3 #>    MeanFPs n_selected piThresh #>      <dbl>      <int>    <dbl> #>  1    0.32          0     1    #>  2    0.32          0     0.99 #>  3    0.8           0     0.98 #>  4    0.8           0     0.97 #>  5    1.6           0     0.96 #>  6    1.6           0     0.95 #>  7    2.24          2     0.94 #>  8    2.24          2     0.93 #>  9    3.68          3     0.92 #> 10    3.68          3     0.91 #> # ℹ 81 more rows #>  #> $breaks #> # A tibble: 5 × 4 #>   FDR_breaks MeanFPs n_selected piThresh #>        <dbl>   <dbl>      <int>    <dbl> #> 1        0.5    0.8           0     0.98 #> 2        1      1.6           0     0.96 #> 3        2      2.24          2     0.94 #> 4        3      3.68          3     0.92 #> 5        5      6.48         11     0.88 #>"},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Stable Features — get_stable_features","title":"Calculate Stable Features — get_stable_features","text":"Returns data frame object features maximum selection probability greater minimum threshold. get_threshold_features() calculates features given selection probability threshold. thin wrapper around get_stable_features() returning list thresholds corresponding thresh_vec.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Stable Features — get_stable_features","text":"","code":"get_stable_features(x, thresh, add_features, warn)  get_threshold_features(x, thresh_vec, ...)"},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Stable Features — get_stable_features","text":"x stab_sel class object matrix containing selection probabilities, .e. stabpath_matrix entry stab_sel class object. thresh numeric(1) [0, 1]. Minimum selection probability threshold. add_features character(n). string additional features force resulting table, irrespective threshold. Used mostly S3 plot method see given stability path feature meeting threshold cutoff. Must exact string match. warn logical(1). warnings triggered stable features found specified threshold FDR upper bound undefined thresholds <= 0.5? thresh_vec numeric(1). vector threshold values. ... Additional arguments passed get_stable_features(), typically add_features = warn = arguments.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Stable Features — get_stable_features","text":"two column data frame containing maximum selection probabilities FDR upper bounds appropriate, see Details. get_threshold_features(), list data frames various thresholds corresponding entries thresh_vec.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Stable Features — get_stable_features","text":"\"stable feature\" defined feature maximum selection probability greater supplied threshold. function returns data.frame features satisfy criterion along maximum selection probability upper bound false discover rate. false discovery rate bound defined thresh > 0.5, otherwise undefined. IMPORTANT! pass matrix method, permutation analysis performed, .e. $EmpFDR column returned data frame. calculation takes long time always desired, method offers user control mechanism output behavior.","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Stable Features — get_stable_features","text":"Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/get_stable_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Stable Features — get_stable_features","text":"","code":"# l1-logistic withr::with_seed(101, {   n_feat      <- 20   n_samples   <- 100   x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y           <- sample(1:2, n_samples, replace = TRUE) })  stab_sel <- stability_selection(x, y) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial)  # Stable features at thresh = 0.55 get_stable_features(stab_sel, 0.55) #>        MaxSelectProb FDRbound #> feat_d         0.945    0.025 #> feat_j         0.945    0.050 #> feat_m         0.945    0.075 #> feat_s         0.935    0.100 #> feat_t         0.935    0.125 #> feat_c         0.905    0.150 #> feat_a         0.900    0.175 #> feat_r         0.900    0.200 #> feat_f         0.885    0.225 #> feat_e         0.880    0.250 #> feat_g         0.875    0.275 #> feat_h         0.875    0.300 #> feat_n         0.865    0.325 #> feat_o         0.860    0.350 #> feat_q         0.855    0.375 #> feat_l         0.850    0.400 #> feat_p         0.850    0.425 #> feat_b         0.835    0.450 #> feat_i         0.800    0.475 #> feat_k         0.800    0.500 # l1-logistic withr::with_seed(101, {   n_feat      <- 20   n_samples   <- 100   x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y           <- sample(1:2, n_samples, replace = TRUE) }) stab_sel <- stability_selection(x, y, \"l1-logistic\", r_seed = 101) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial) get_threshold_features(stab_sel, seq(0.6, 0.9, 0.1)) #> $thresh_0.6 #>        MaxSelectProb FDRbound #> feat_d         0.945   0.0125 #> feat_t         0.935   0.0250 #> feat_a         0.915   0.0375 #> feat_j         0.915   0.0500 #> feat_s         0.905   0.0625 #> feat_m         0.900   0.0750 #> feat_l         0.890   0.0875 #> feat_f         0.885   0.1000 #> feat_q         0.880   0.1125 #> feat_g         0.870   0.1250 #> feat_e         0.860   0.1375 #> feat_n         0.860   0.1500 #> feat_r         0.860   0.1625 #> feat_c         0.855   0.1750 #> feat_k         0.850   0.1875 #> feat_b         0.845   0.2000 #> feat_o         0.840   0.2125 #> feat_h         0.835   0.2250 #> feat_p         0.830   0.2375 #> feat_i         0.785   0.2500 #>  #> $thresh_0.7 #>        MaxSelectProb FDRbound #> feat_d         0.945  0.00625 #> feat_t         0.935  0.01250 #> feat_a         0.915  0.01875 #> feat_j         0.915  0.02500 #> feat_s         0.905  0.03125 #> feat_m         0.900  0.03750 #> feat_l         0.890  0.04375 #> feat_f         0.885  0.05000 #> feat_q         0.880  0.05625 #> feat_g         0.870  0.06250 #> feat_e         0.860  0.06875 #> feat_n         0.860  0.07500 #> feat_r         0.860  0.08125 #> feat_c         0.855  0.08750 #> feat_k         0.850  0.09375 #> feat_b         0.845  0.10000 #> feat_o         0.840  0.10625 #> feat_h         0.835  0.11250 #> feat_p         0.830  0.11875 #> feat_i         0.785  0.12500 #>  #> $thresh_0.8 #>        MaxSelectProb    FDRbound #> feat_d         0.945 0.004166667 #> feat_t         0.935 0.008333333 #> feat_a         0.915 0.012500000 #> feat_j         0.915 0.016666667 #> feat_s         0.905 0.020833333 #> feat_m         0.900 0.025000000 #> feat_l         0.890 0.029166667 #> feat_f         0.885 0.033333333 #> feat_q         0.880 0.037500000 #> feat_g         0.870 0.041666667 #> feat_e         0.860 0.045833333 #> feat_n         0.860 0.050000000 #> feat_r         0.860 0.054166667 #> feat_c         0.855 0.058333333 #> feat_k         0.850 0.062500000 #> feat_b         0.845 0.066666667 #> feat_o         0.840 0.070833333 #> feat_h         0.835 0.075000000 #> feat_p         0.830 0.079166667 #>  #> $thresh_0.9 #>        MaxSelectProb FDRbound #> feat_d         0.945 0.003125 #> feat_t         0.935 0.006250 #> feat_a         0.915 0.009375 #> feat_j         0.915 0.012500 #> feat_s         0.905 0.015625 #> feat_m         0.900 0.018750 #>"},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Objects — objects","title":"Package Objects — objects","text":"Package Objects","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Objects — objects","text":"","code":"clust_data  progeny_data"},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Package Objects — objects","text":"clust_data: 2 column data matrix containing 2 features example, named \"F1\" \"F2\", containing 20 observations. progeny_data: 2 column data matrix containing 2 features, \"F1\" \"F2\", 150 observations, 3 clusters bivariate space.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Package Objects — objects","text":"clust_data: Hu, et. al. progeny_data: Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package Objects — objects","text":"clust_data: original clustering example data Progeny Clustering paper. 2 feature data set example (see references) example illustration Figure 1, page 3. progeny_data: simulated clustering data set generated contain 3 true clusters bivariate space. 2 features, named \"F1\" \"F2\" 150 observations.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Package Objects — objects","text":"clust_data: Hu, C.W., Kornblau, S.M., Slater, J.H. .. Qutub (2015). Progeny Clustering: Method Identify Biological Phenotypes. Scientific Reports, 5:12894. pg. 3. http://www.nature.com/articles/srep12894","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Objects — objects","text":"","code":"head(clust_data) #>     F1   F2 #> 1 0.40 0.85 #> 2 0.98 0.24 #> 3 0.35 0.98 #> 4 0.62 0.08 #> 5 0.48 0.79 #> 6 0.63 0.38  plot(progeny_data, col = rep(2:4, each = 50L),      pch = rep(16:18, each = 50L), cex = 1.75,      main = \"Simulated 3 Cluster Data\")"},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Empirical FDR — plot_emp_fdr","title":"Plot Empirical FDR — plot_emp_fdr","text":"Plot mean number false positives (FPs) versus number selected features sequence selection probability thresholds. possible, stab_sel object must permuted data order calculate empirical false discovery rates. area sub-diagonal represents features added without commensurate increase false positives (Good). inverse true super-diagonal, false positives included faster additional features (Bad). legend highlights pre-defined empirical FDR breaks: c(0.5, 1, 2, 3, 5) evaluated nearest threshold cutoff.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Empirical FDR — plot_emp_fdr","text":"","code":"plot_emp_fdr(x, thresh_seq = seq(1, 0.1, by = -0.01))  plot_permuted_data(x, which = NULL, ...)"},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Empirical FDR — plot_emp_fdr","text":"x stab_sel class object generated via stability_selection(). thresh_seq numeric(n). sequence [0, 1] specifying thresholds evaluate. integer(1). null hypothesis permuted stability paths plot. ... Additional arguments passed plot.stab_sel().","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot Empirical FDR — plot_emp_fdr","text":"plot_permuted_data(): Plot permutation paths object class stab_sel. paths stability selection paths n class scrambled permutations, .e. null.","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Empirical FDR — plot_emp_fdr","text":"Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/plot_emp_fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Empirical FDR — plot_emp_fdr","text":"","code":"# l1-logistic withr::with_seed(101, {   n_feat      <- 20   n_samples   <- 100   x           <- matrix(rnorm(n_feat * n_samples), n_samples, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y           <- sample(1:2, n_samples, replace = TRUE) })  # typically set > 75 permutations stab_sel <- stability_selection(x, y, \"l1-logistic\", num_perms = 25,                                 r_seed = 101, parallel = TRUE) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial) plot_emp_fdr(stab_sel) #> Warning: No shared levels found between `names(values)` of the manual scale and #> the data's colour values. #> Warning: No shared levels found between `names(values)` of the manual scale and #> the data's colour values.   # Plot the permuted data individually plot_permuted_data(stab_sel, 3L)   # choose 3rd permutation"},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Progeny Clustering — progeny_cluster","title":"Perform Progeny Clustering — progeny_cluster","text":"Determine stable (optimal) number clusters via Progeny Clustering algorithm. is_pclust() function checks whether object class pclust. See inherits().","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Progeny Clustering — progeny_cluster","text":"","code":"progeny_cluster(   data,   clust_iter = 2:10L,   reps = 10L,   verbose = interactive(),   ... )  is_pclust(x)  # S3 method for class 'pclust' plot(x, ...)  # S3 method for class 'pclust' print(x, ...)"},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Progeny Clustering — progeny_cluster","text":"data (n x p) data matrix containing n samples p features. Can also data frame row corresponds sample observation, whereas column corresponds feature variable. clust_iter integer(n). Span k clusters interrogate reps integer(1). number repeat iterations perform. Particularly useful error bars plotting desired. verbose logical(1). Print progress clustering repeats console. Defaults interactive(). ... Additional parameters passed internal progeny_k(), typically iter = size =. plot() method, arguments passed corresponding graphics device. x pclust class object (object tested one).","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Progeny Clustering — progeny_cluster","text":"pclust class object, list containing: scores matrix stability scores iteration matrix, k columns mean_scores mean stability scores cluster k ci95_scores 95% confidence interval scores random_scores reference (random) scores iteration clustering level (k) mean_random_scores mean reference (random) data set, .e. column means random_scores D_max distance mean stability scores mean reference scores cluster k D_gap \"gap\" distance metric neighboring cluster k differences. See original paper reference. clust_iter Integer Sequence k clusters interrogated repeats number repeat iterations performed iter number progeny iterations performed size progeny size used iteration call call made progeny_cluster() is_pclust() returns logical boolean.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform Progeny Clustering — progeny_cluster","text":"Hu, C.W., Kornblau, S.M., Slater, J.H. .. Qutub (2015). Progeny Clustering: Method Identify Biological Phenotypes. Scientific Reports, 5:12894. http://www.nature.com/articles/srep12894","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform Progeny Clustering — progeny_cluster","text":"Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/progeny_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Progeny Clustering — progeny_cluster","text":"","code":"# `iter=` and `size=` are passed to `progeny_k()` pclust <- withr::with_seed(1234,   progeny_cluster(progeny_data, clust_iter = 2:9L, iter = 20L, size = 6) ) pclust #> ══ Progeny Cluster Object ═════════════════════════════════════════════ #>    Call                     progeny_cluster(data = progeny_data, clust_iter = 2:9L, iter = 20L, size = 6) #>    Progeny Size             6 #>    No. of Iterations        20 #>    K Iterations             2 3 4 5 6 7 8 9 #>  #> ── Mean & CI95 Stability Scores ─────────────────────────────────────── #>        k=2  k=3   k=4  k=5  k=6  k=7  k=8 k=9* #> 2.5%  2.66 15.4  8.24 12.8 10.5 16.4 14.7 19.6 #>       3.63 21.0 12.70 15.5 13.5 18.2 20.0 24.6 #> 97.5% 5.49 33.1 15.89 21.2 16.7 20.4 23.1 29.8 #>  #> ── Maximum Distance Scores ──────────────────────────────────────────── #>    k=2   k=3*    k=4    k=5    k=6    k=7    k=8    k=9  #> -2.073 13.031 -0.526  3.361 -3.404 -2.778 -7.524 -9.303  #>  #> ── Gap Distance Scores ──────────────────────────────────────────────── #>    k=2   k=3*    k=4    k=5    k=6    k=7    k=8    k=9  #> -25.76  25.76 -11.17   4.89  -6.82   3.05  -2.93   2.93  #> ═══════════════════════════════════════════════════════════════════════  # Test progeny clustering on iris data set # Doesn't work quite as well as the simulated data set clust_iris <- withr::with_seed(99,   progeny_cluster(iris[, -5L], clust_iter = 2:5L, size = 6L, iter = 50) ) #> Warning: did not converge in 20 iterations #> Warning: did not converge in 20 iterations clust_iris    # true n clusters = 3 #> ══ Progeny Cluster Object ═════════════════════════════════════════════ #>    Call                     progeny_cluster(data = iris[, -5L], clust_iter = 2:5L, size = 6L, iter = 50) #>    Progeny Size             6 #>    No. of Iterations        50 #>    K Iterations             2 3 4 5 #>  #> ── Mean & CI95 Stability Scores ─────────────────────────────────────── #>       k=2*   k=3  k=4  k=5 #> 2.5%   299  51.2 21.9 41.0 #>        299  82.9 27.6 51.4 #> 97.5%  299 194.9 39.4 72.8 #>  #> ── Maximum Distance Scores ──────────────────────────────────────────── #>  k=2*   k=3   k=4   k=5  #> 292.4  74.5  17.9  39.5  #>  #> ── Gap Distance Scores ──────────────────────────────────────────────── #> k=2*  k=3  k=4  k=5  #>  176 -176  -79   79  #> ═══════════════════════════════════════════════════════════════════════  # Test for class `pclust` is_pclust(pclust) #> [1] TRUE  # S3 plot method plot(pclust)   plot(clust_iris)"},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Stability Clustering — stability_cluster","title":"Perform Stability Clustering — stability_cluster","text":"Partitioning Around Medoids (PAM) used uses robust measurement cluster centers (medoids) implementation keeps cluster labels consistent across runs, key feature calculating across run stability. occur using kmeans() initial cluster labels arbitrarily assigned.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Stability Clustering — stability_cluster","text":"","code":"stability_cluster(data, k, iter = 100)"},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Stability Clustering — stability_cluster","text":"data (n x p) data matrix containing n samples p features. Can also data frame row corresponds sample observation, whereas column corresponds feature variable. k integer(1). number clusters. iter integer(1). number random subset iterations perform.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Stability Clustering — stability_cluster","text":"n x (k + 1) dimensional tibble clustering probabilities k, plus final column named \"ProbK\", indicates \"probable\" cluster membership sample.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Perform Stability Clustering — stability_cluster","text":"make sure clusters indexed comes k-means? Worried index errors (seems ok now).","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform Stability Clustering — stability_cluster","text":"Hastie, et al. 2009.","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform Stability Clustering — stability_cluster","text":"Stu Field","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Stability Clustering — stability_cluster","text":"","code":"stab_clust <- withr::with_seed(999, stability_cluster(progeny_data, k = 3, iter = 500)) table(actual = rep(1:3L, each = 50L), predicted = stab_clust$ProbK) #>       predicted #> actual  1  2  3 #>      1 49  1  0 #>      2  0 46  4 #>      3  1  0 49  stab_clust$true_cluster <- rep(1:3L, each = 50L)  # View the stable clusters stab_clust #> # A tibble: 150 × 5 #>    `k=1` `k=2` `k=3` ProbK true_cluster #>    <dbl> <dbl> <dbl> <dbl>        <int> #>  1 0.718 0.156 0.126     1            1 #>  2 0.684 0.172 0.144     1            1 #>  3 0.682 0.152 0.166     1            1 #>  4 0.664 0.19  0.146     1            1 #>  5 0.642 0.184 0.174     1            1 #>  6 0.7   0.154 0.146     1            1 #>  7 0.696 0.13  0.174     1            1 #>  8 0.644 0.154 0.202     1            1 #>  9 0.652 0.178 0.17      1            1 #> 10 0.682 0.154 0.164     1            1 #> # ℹ 140 more rows  # View the incorrectly clustered samples (n = 6) filter(stab_clust, ProbK != true_cluster) #> # A tibble: 6 × 5 #>   `k=1` `k=2` `k=3` ProbK true_cluster #>   <dbl> <dbl> <dbl> <dbl>        <int> #> 1 0.37  0.442 0.188     2            1 #> 2 0.196 0.376 0.428     3            2 #> 3 0.228 0.346 0.426     3            2 #> 4 0.174 0.406 0.42      3            2 #> 5 0.162 0.388 0.45      3            2 #> 6 0.636 0.224 0.14      1            3  # Plot Stability Clusters cols <- c(\"#24135F\", \"#00A499\", \"#840B55\") withr::with_par(list(mgp = c(2.00, 0.75, 0.0), mar = c(3, 4, 3, 1), mfrow = 1:2L), {   plot(progeny_data,        col = cols[stab_clust$true_cluster],        bg  = cols[stab_clust$true_cluster],        pch = stab_clust$true_cluster + 20,        lwd = 1, cex = 1.75, main = \"Simulated 3 Cluster Data\")   plot(progeny_data,        col = cols[stab_clust$ProbK],        bg  = cols[stab_clust$true_cluster],        pch = stab_clust$true_cluster + 20,        lwd = 2.5, cex = 1.5, main = \"Stability Clustering\") })"},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Stability Selection — stability_selection","title":"Stability Selection — stability_selection","text":"Performs stability selection set predictive features response variable. Stability selection performed using user-specified kernel. classification problems l1-logistic kernel used response vector factor two class labels. lasso response column numeric vector. \"Cox\" response two column matrix containing event time first column censoring indicator second column. randomized lasso used alpha parameter set value less 1. randomized Lasso model coefficients randomly re-weighted calculating regularization term. weighting can performed two different ways. Pw = NA random weights sampled uniformly alpha 1. Pw supplied, random weights chosen alpha probability Pw 1 otherwise. latter choice used Theorem 2 Meinshausen Buhlmann. Recommended values alpha Pw [0.5, 0.2]. is_stab_sel() function checks whether object class stab_sel. See inherits().","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stability Selection — stability_selection","text":"","code":"stability_selection(   x,   y = NULL,   kernel = c(\"l1-logistic\", \"lasso\", \"ridge\", \"Cox\", \"pca.sd\", \"pca.thresh\",     \"multinomial\"),   num_iter = 100,   parallel = FALSE,   alpha = 0.8,   Pw = 0.5,   num_perms = 0,   standardize = TRUE,   lambda_min_ratio = 0.1,   beta_threshold = 0L,   elastic_alpha = 1,   lambda_pad = 20,   impute_outliers = FALSE,   impute_n_sigma = 3,   r_seed = sample(1000, 1),   ... )  is_stab_sel(x)  # S3 method for class 'stab_sel' print(x, ...)  # S3 method for class 'stab_sel' summary(object, ..., thresh)  # S3 method for class 'stab_sel' plot(   x,   thresh = 0.6,   custom_labels = NULL,   main = NULL,   sort_by_AUC = TRUE,   ln_cols = unlist(col_palette),   add_perm = FALSE,   emp_thresh = seq(1, 0.1, by = -0.01),   ... )"},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stability Selection — stability_selection","text":"x numeric \\(n x p\\) matrix predictive features containing n observation rows p feature columns. Alternatively, stab_sel class object passing one S3 generic methods. y response variable. kernel \"l1-logistic\" vector binary class labels. kernel \"Cox\" two column matrix event time first column censoring indicator (1 = event, 0 = censored) second column. kernel character(1). string describing underlying model used selection. Options : \"l1-logistic\" (default) \"lasso\" \"Cox\" \"ridge\" \"multinomial\" \"pca.sd\" \"pca.thresh\" num_iter integer(1). Defining number sub-sampling iterations stability selection. parallel logical(1). parallel processing via multiple cores implemented? Must Linux platform parallel package installed. Otherwise defaults 1 core. alpha numeric(1). Value defining weakness parameter randomized regularization. minimum random weight applied beta coefficient regularization. Pw numeric(1). Value defining probability weak weight, see alpha. Pw = NA coefficient weights sampled uniformly alpha 1. num_perms integer(1). number permutations use calculating empirical false positive rate. standardize logical(1). Whether data centered scaled. lambda_min_ratio minimum value lambda/max(lambda) use selection procedure. See glmnet(). beta_threshold numeric(1). Floating point value defining selection levels ridge regression. Since ridge regression zero coefficients, selection coefficient curves selection probability effective. variable coefficient absolute value greater equal beta_threshold selected. elastic_alpha numeric(1). Floating point value 0 1. 0, results glmnet() equivalent Ridge regression. 1, results equivalent Lasso. value 0 1 creates compromise L1 L2 penalty. lambda_pad lambda path padded high values lambda order produce appealing plot. Occasionally, degree padding needs adjusted order produce better resolution low values lambda. Typical values parameter 20 (default), 15, 10, 5. impute_outliers logical(1). statistical outliers (\\(3 * \\sigma\\)) imputed approximate Gaussian distribution stability selection? See wranglr::impute_outliers(). impute_n_sigma numeric(1). Standard deviation outlier threshold imputing outliers impute_outliers = TRUE, ignored otherwise. r_seed integer(1). Seed random number generator, allowing reproducibility results. ... Additional arguments passed one S3 methods stab_sel class objects, generics include: plot.stab_sel() print.stab_sel() summary.stab_sel() object stab_sel class object. thresh numeric minimum selection probability threshold. value can also vector values [0, 1], ideally greater 0.50. custom_labels character(n). Character vector additional features label plot, see Details. main character(1). Optional plot title (default depends kernel). sort_by_AUC logical(1). TRUE, entries legend sorted curve AUC values parentheses following variable name legend. ln_cols character(n). vector colors used line colors plotting. Recycled necessary. add_perm logical(1). empirical false discovery lines null permutation added plot (permutation performed)? can time consuming depending number permutations. emp_thresh numeric(n). vector describing empirical threshold values used (default = seq(1, 0.1, = 0.01)).","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stability Selection — stability_selection","text":"stab_sel class object: stabpath_matrix matrix \\(features x lambda_seq\\) containing stability selection probabilities. row matrix corresponds stability selection path single feature. lambda sequence lambdas used regularization. correspond columns stabpath_matrix. alpha weakness parameter provided call. Pw weak weight probability provided call. kernel kernel used (e.g. l1-logistic). num_iter number iterations used computing stability paths. standardize data standardized prior analysis? lambda_min_ratio ? perm_data Logical. permuted data perform empirical FDR? permpath_list list containing information calculated permutation paths empirical false positive rate. perm_lambda lambda used permuted lists. permpath_max max lambda permuted lists (think). beta matrix betas calculated selection process. r_seed random seed used. is_stab_sel function returns logical boolean. S3 print method returns: Stability Selection Kernel kernel used stability selection algorithm. Weakness weakness used (alpha argument). Weakness Probability probability weakness applied (Pw = argument). Number Iterations Number iterations selection (num_iter = argument). Standardized data standardized prior stability selection? Imputed Outliers statistical outliers imputed Gaussian approximation prior stability selection? Lambda Max maximum lambda (tuning parameter) used. Lambda Max maximum lambda (tuning parameter) used. Random Seed seed passed random number generator subset selection. ggplot.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stability Selection — stability_selection","text":"Stability selection can performed multiple cores setting parallel = TRUE. functionality requires parallel::mclapply() parallel package. available Windows based OS.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Stability Selection — stability_selection","text":"print(stab_sel): S3 print method class stab_sel. summary(stab_sel): S3 summary method class stab_sel. plot(stab_sel): S3 plot method plots selection paths features. plot closely resembles lasso coefficient plot regularization parameter (lambda) plotted x-axis feature selection probability (rather model coefficient) plotted y-axis. Plots regularization parameter (lambda) x-axis selection probability y-axis. regularization parameter plotted lambda/max(lambda) range 1 0. selection probability corresponds number times particular marker chosen given value lambda. line plot marker represents stability selection path range regularization parameter. features maximum selection probability greater thresh (shown dotted horizontal line) colored labeled remaining features colored gray unlabeled. Additionally, can provide set custom labels colored labeled regardless max selection probability. feature labeled capital letter full name feature indicated legend along AUC curve parentheses.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stability Selection — stability_selection","text":"Additional features can passed strings summary method via add_features argument.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stability Selection — stability_selection","text":"Meinshausen, N. Buhlmann, P. (2010), Stability selection. Journal Royal Statistical Society: Series B (Statistical Methodology), 72: 417-473. doi: 10.1111/j.1467-9868.2010.00740.x","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stability Selection — stability_selection","text":"Michael R. Mehan, Stu Field, Robert Kirk DeLisle","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stability_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stability Selection — stability_selection","text":"","code":"# l1-logistic withr::with_seed(101, {   n_feat      <- 20   n_samp      <- 100   x           <- matrix(rnorm(n_samp * n_feat), n_samp, n_feat)   colnames(x) <- paste0(\"feat\", \"_\", head(letters, n_feat))   y           <- sample(1:2, n_samp, replace = TRUE)   stab_sel    <- stability_selection(x, y, kernel = \"l1-logistic\", r_seed = 101) }) #> ✓ Using kernel: 'l1-logistic' and 1 core (serial)  # Cox xcox <- feature_matrix(stabilityselectr:::log_rfu(simdata))  # Note: this works because colnames are already \"time\" and \"status\". #   In 'real' datasets, you may need to rename the final matrix as #   \"time\" and \"status\".  ycox <- select(simdata, time, status) |> as.matrix() stab_sel_cox <- stability_selection(xcox, ycox, kernel = \"Cox\", r_seed = 3) #> ✓ Using kernel: 'Cox' and 1 core (serial) # Test for class `stab_sel` is_stab_sel(stab_sel) #> [1] TRUE  # S3 print method stab_sel #> ══ Stability Selection (Kernel: l1-logistic) ══════ #> • Weakness (alpha)            0.8 #> • Weakness Probability (Pw)   0.5 #> • Number of Iterations        100 #> • Standardized                'Yes' #> • Imputed Outliers            'No' #> • Lambda Max                  0.144 #> • Lambda Min Ratio            0.1 #> • Permuted Data               'No' #> • Random Seed                 101 #> ═══════════════════════════════════════════════════════════════════════  # S3 summary method summary(stab_sel, thresh = 0.6) #> # A tibble: 20 × 4 #>    feature MaxSelectProb   AUC FDRbound #>    <chr>           <dbl> <dbl>    <dbl> #>  1 feat_d          0.945 0.422   0.0125 #>  2 feat_t          0.935 0.416   0.025  #>  3 feat_a          0.915 0.342   0.0375 #>  4 feat_j          0.915 0.430   0.05   #>  5 feat_s          0.905 0.343   0.0625 #>  6 feat_m          0.9   0.410   0.075  #>  7 feat_l          0.89  0.326   0.0875 #>  8 feat_f          0.885 0.300   0.1    #>  9 feat_q          0.88  0.290   0.113  #> 10 feat_g          0.87  0.269   0.125  #> 11 feat_e          0.86  0.283   0.138  #> 12 feat_n          0.86  0.226   0.15   #> 13 feat_r          0.86  0.352   0.163  #> 14 feat_c          0.855 0.326   0.175  #> 15 feat_k          0.85  0.292   0.188  #> 16 feat_b          0.845 0.275   0.2    #> 17 feat_o          0.84  0.243   0.213  #> 18 feat_h          0.835 0.274   0.225  #> 19 feat_p          0.83  0.236   0.238  #> 20 feat_i          0.785 0.242   0.25   summary(stab_sel, thresh = 0.8, add_features = \"feat_c\")   # force feat_c into table #> # A tibble: 19 × 4 #>    feature MaxSelectProb   AUC FDRbound #>    <chr>           <dbl> <dbl>    <dbl> #>  1 feat_d          0.945 0.422  0.00417 #>  2 feat_t          0.935 0.416  0.00833 #>  3 feat_a          0.915 0.342  0.0125  #>  4 feat_j          0.915 0.430  0.0167  #>  5 feat_s          0.905 0.343  0.0208  #>  6 feat_m          0.9   0.410  0.025   #>  7 feat_l          0.89  0.326  0.0292  #>  8 feat_f          0.885 0.300  0.0333  #>  9 feat_q          0.88  0.290  0.0375  #> 10 feat_g          0.87  0.269  0.0417  #> 11 feat_e          0.86  0.283  0.0458  #> 12 feat_n          0.86  0.226  0.05    #> 13 feat_r          0.86  0.352  0.0542  #> 14 feat_c          0.855 0.326  0.0583  #> 15 feat_k          0.85  0.292  0.0625  #> 16 feat_b          0.845 0.275  0.0667  #> 17 feat_o          0.84  0.243  0.0708  #> 18 feat_h          0.835 0.274  0.075   #> 19 feat_p          0.83  0.236  0.0792  # S3 plot method plot(stab_sel, thresh = 0.8)"},{"path":"https://stufield.github.io/stabilityselectr/reference/stabilityselectr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stabilityselectr: R Package to Perform Stability and Cluster Selection — stabilityselectr-package","title":"stabilityselectr: R Package to Perform Stability and Cluster Selection — stabilityselectr-package","text":"stabilityselectr package performs stability selection variety kernels provided 'glmnet' package, provides simple tools plotting extracting selected features. additional functionality designed facilitate various forms permutation clustering analyses.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stabilityselectr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stabilityselectr: R Package to Perform Stability and Cluster Selection — stabilityselectr-package","text":"Stability selection performed using stability_selection(), returns stab_sel class object. stability path can plotted using graphics::plot(). tibble highest selection probability can created using get_stable_features(). See vignettes.","code":""},{"path":"https://stufield.github.io/stabilityselectr/reference/stabilityselectr-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"stabilityselectr: R Package to Perform Stability and Cluster Selection — stabilityselectr-package","text":"Meinshausen, N. Buhlmann, P. (2010). Stability selection. Journal Royal Statistical Society: Series B (Statistical Methodology), 72: 417-473. doi: 10.1111/j.1467-9868.2010.00740.x Hu, C.W., Kornblau, S.M., Slater, J.H. .. Qutub (2015). Progeny Clustering: Method Identify Biological Phenotypes. Scientific Reports, 5:12894. http://www.nature.com/articles/srep12894","code":""},{"path":[]},{"path":"https://stufield.github.io/stabilityselectr/reference/stabilityselectr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stabilityselectr: R Package to Perform Stability and Cluster Selection — stabilityselectr-package","text":"Maintainer: Stu Field stu.g.field@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://stufield.github.io/stabilityselectr/news/index.html","id":"stabilityselectr-002","dir":"Changelog","previous_headings":"","what":"stabilityselectr 0.0.2","title":"stabilityselectr 0.0.2","text":"Release public GitHub","code":""},{"path":"https://stufield.github.io/stabilityselectr/news/index.html","id":"stabilityselectr-0019000","dir":"Changelog","previous_headings":"","what":"stabilityselectr 0.0.1.9000","title":"stabilityselectr 0.0.1.9000","text":"Structural package development …","code":""},{"path":"https://stufield.github.io/stabilityselectr/news/index.html","id":"stabilityselectr-001-tada","dir":"Changelog","previous_headings":"","what":"stabilityselectr 0.0.1 🎉","title":"stabilityselectr 0.0.1 🎉","text":"Initial release! 🥳","code":""}]
